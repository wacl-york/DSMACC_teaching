/ include file with definition of the chemical species
// and chemical equations

#INCLUDE ./organic.kpp
#INCLUDE ./inorganic.kpp
#INCLUDE ./emission.kpp
#INCLUDE ./deposition.kpp

#INLINE F90_GLOBAL
  REAL(dp) :: PRESS, LAT, LON, O3COL, JO1D, JNO2
  REAL(dp) :: JDAY, JREPEAT, ALBEDO, SAREA, RP1
  REAL(dp) :: BLH, DEPVEL
  INTEGER :: INIT_TIME, NOX(NVAR)
  REAL(dp):: CONSTRAIN(NVAR)
  LOGICAL :: SPEC_CH4, SPEC_H2
  INTEGER :: IntTime
  LOGICAL :: CONSTRAIN_NOX
  LOGICAL :: CONSTRAIN_RUN, LAST_POINT, OUTPUT_LAST
  CHARACTER(LEN=15) :: spec_name(10000)
  INTEGER :: const_method(10000), LINECOUNT
!Photolysis variables
  include 'tuv_old/params'
  REAL*8::bs(19,kj), cs(19,kj),ds(19,kj)
  REAL::svj_tj(kt,kj), szas(kt), jfactno2, jfacto1d
!End photolysis variables
#ENDINLINE {above lines go into MODULE KPP_ROOT_Global}

#INLINE F90_UTIL

! ****************************************************************
!                            
! InitSaveData - Opens the data file for writing
!   Parameters :                                                  
!
! ****************************************************************

      SUBROUTINE NewInitSaveData(counter, outputname)

      USE model_Parameters
      USE model_monitor
      USE model_GLOBAL

      Integer counter, length, ierr
      character*20 filename1, filename
      character*50 outputname

      open(10, file=outputname)
 
      write (10,'(100000(a25,","))') 'TIME','LAT','LON','PRESS','TEMP','H2O', &
	'M', 'JNO2FACT','JO1DFACT','RO2', SPC_NAMES

      END SUBROUTINE NewInitSaveData

! End of InitSaveData function
! ****************************************************************
! ****************************************************************
!                            
! SaveData - Write LOOKAT species in the data file 
!   Parameters :                                                  
!
! ****************************************************************

      SUBROUTINE NewSaveData ()

      USE model_Global
      USE model_Monitor
      USE model_Integrator

      INTEGER i
      
      	WRITE(10,'(10000(E25.16,","))') TIME,LAT,LON,PRESS,TEMP,H2O,CFACTOR,&
	JFACTNO2, JFACTO1D,RO2,C


      END SUBROUTINE NewSaveData

! End of SaveData function
! ****************************************************************

! ****************************************************************
!                            
! CloseSaveData - Close the data file 
!   Parameters :                                                  
!
! ****************************************************************

      SUBROUTINE NewCloseData ()

      USE model_Parameters

      CLOSE(10)


      END SUBROUTINE NewCloseData

! End of CloseSaveData function
! ****************************************************************

      SUBROUTINE ICNVRT(WAY,NUM,STRING,LENGTH,IERR)
!
!       FUNCTION:
!F
!F        This subroutine does an integer-to-character conversion
!F        or a characater-to-integer conversion depending on the
!F        integer WAY:
!F                If WAY = 0 then an integer-to-character conversion
!F                is done. If WAY .NE. 0 then a character-to-integer
!F                conversion is done.
!F
!       USAGE:
!U
!U        !ALL I!NVRT(WAY,NUM,STRING)
!U             where WAY, NUM, STRING, and LENGTH are defined below.
!U
!U        Example: !ALL I!NVRT(0,1000,STRING,LENGTH)
!U                 on return STRING = '1000' and
!U                 LENGTH = 4.
!U         
!       INPUTS:
!I
!I        WAY - INTEGER; Determines which way the conversion goes:
!I              if WAY = 0 then an integer-to-character conversion
!I                         is performed;
!I              if WAY.NE.0 then a character-to-integer conversion
!I                         is performed.
!I
!I         NUM - INTEGER; an input only if WAY = 0. NUM is the integer
!I               number to be converted to a character expression.
!I
!I         STRING - !HARACTER; an input only if WAY .NE. 0. STRING
!I                is the character expression to be converted to an
!CI                integer value. It contain no decimal points or 
!I                non-numeric characters other than possibly a
!I                sign. If STRING contains  a '+' sign, it will be
!I                stripped of it on return.
!I
!       OUTPUTS:
!O
!O         NUM - INTEGER; contains the INTEGER representation of 
!O                STRING.
!O
!O         STRING - !HARA!TER; contains the CHARACTER representation of
!O                  NUM.
!CO
!CO         LENGTH - INTEGER; The length of STRING to the first blank.
!CO                  The significant part of STRING can be accessed with
!CO                  the declaration STRING(1:LENGTH).
!CO
!CO         IERR - INTEGER variable giving return condition:
!CO                IERR = 0 for normal return;
!CO                IERR = 1 if NUM cannot be converted to STRING because
!CO                       STRING is too short or STRING cannot be
!CO                       converted to NUM because STRING is too long.
!CO                IERR = 2 if STRING contained a non-numeric character
!CO                       other than a leading sign or something went
!CO                       wrong with an integer-to-character conversion.
!CO
!C       ALGORITHM:
!CA
!CA         Nothing noteworthy, except that this subroutine will work
!CA          for strange character sets where the character '1' doesn't
!CA          follow '0', etc.
!CA
!C       MACHINE DEPENDENCIES:
!CM
!CM          The parameter MAXINT (below) should be set to the
!CM          number of digits that an INTEGER data type can have
!CM          not including leading signs. For VAX FORTRAN V4.4-177
!CM          MAXINT = 10.
!CM
!CM          NOTE: Under VAX FORTRAN V4.4-177, the
!CM          error condition IERR = 1 will never occur for an
!CM          integer-to-character conversion if STRING
!CM          is allocated at least 11 bytes (CHARACTER*11).
!CM
!C       HISTORY:
!CH
!CH      written by:             bobby bodenheimer
!CH      date:                   september 1986
!CH      current version:        1.0
!CH      modifications:          none
!CH
!C       ROUTINES CALLED:
!CC
!CC          NONE.
!CC
!C----------------------------------------------------------------------
!C       written for:    The CASCADE Project
!C                       Oak Ridge National Laboratory
!C                       U.S. Department of Energy
!C                       contract number DE-AC05-840R21400
!C                       subcontract number 37B-7685 S13
!C                       organization:  The University of Tennessee
!C----------------------------------------------------------------------
!C       THIS SOFTWARE IS IN THE PUBLIC DOMAIN
!C       NO RESTRICTIONS ON ITS USE ARE IMPLIED
!C----------------------------------------------------------------------
!C
!C Global Variables.
!C
      INTEGER       WAY
      INTEGER       LENGTH
      INTEGER       NUM
      INTEGER       IERR
      CHARACTER*(*) STRING
!C
!C Local Variables
!C
      INTEGER       I
      INTEGER       MAXINT
      INTEGER       MNUM
      INTEGER       M
      LOGICAL       NEG
!C
      PARAMETER(MAXINT=10)
!C
      NEG = .FALSE.
      IERR = 0
!C
!C  Integer-to-character conversion.
!C
      IF (WAY.EQ.0) THEN
         STRING = ' '
         IF (NUM.LT.0) THEN
            NEG = .TRUE.
            MNUM = -NUM
            LENGTH = INT(LOG10(REAL(MNUM))) + 1
         ELSE IF (NUM.EQ.0) THEN
            MNUM = NUM
            LENGTH = 1
         ELSE
            MNUM = NUM
            LENGTH = INT(LOG10(REAL(MNUM))) + 1
         END IF
         IF (LENGTH.GT.LEN(STRING)) THEN
            IERR = 1
            RETURN
         END IF
         DO 10, I=LENGTH,1,-1
            M=INT(REAL(MNUM)/10**(I-1))
            IF (M.EQ.0) THEN
               STRING(LENGTH-I+1:LENGTH-I+1) = '0'
            ELSE IF (M.EQ.1) THEN
               STRING(LENGTH-I+1:LENGTH-I+1) = '1'
            ELSE IF (M.EQ.2) THEN
               STRING(LENGTH-I+1:LENGTH-I+1) = '2'
            ELSE IF (M.EQ.3) THEN
               STRING(LENGTH-I+1:LENGTH-I+1) = '3'
            ELSE IF (M.EQ.4) THEN
               STRING(LENGTH-I+1:LENGTH-I+1) = '4'
            ELSE IF (M.EQ.5) THEN
               STRING(LENGTH-I+1:LENGTH-I+1) = '5'
            ELSE IF (M.EQ.6) THEN
               STRING(LENGTH-I+1:LENGTH-I+1) = '6'
            ELSE IF (M.EQ.7) THEN
               STRING(LENGTH-I+1:LENGTH-I+1) = '7'
            ELSE IF (M.EQ.8) THEN
               STRING(LENGTH-I+1:LENGTH-I+1) = '8'
            ELSE IF (M.EQ.9) THEN
               STRING(LENGTH-I+1:LENGTH-I+1) = '9'
            ELSE
               IERR = 2
               RETURN
            END IF
            MNUM = MNUM - M*10**(I-1)
10       CONTINUE
         IF (NEG) THEN
            STRING = '-'//STRING
            LENGTH = LENGTH + 1
         END IF
!C
!C  Character-to-integer conversion.
!!C
      ELSE
         IF (STRING(1:1).EQ.'-') THEN
            NEG = .TRUE.
            STRING = STRING(2:LEN(STRING))
         END IF
         IF (STRING(1:1).EQ.'+') STRING = STRING(2:LEN(STRING))
         NUM = 0
         LENGTH = INDEX(STRING,' ') - 1
         IF (LENGTH.GT.MAXINT) THEN
            IERR = 1
            RETURN
         END IF
         DO 20, I=LENGTH,1,-1
            IF (STRING(LENGTH-I+1:LENGTH-I+1).EQ.'0') THEN
               M = 0
            ELSE IF (STRING(LENGTH-I+1:LENGTH-I+1).EQ.'1') THEN
               M = 1
            ELSE IF (STRING(LENGTH-I+1:LENGTH-I+1).EQ.'2') THEN
               M = 2
            ELSE IF (STRING(LENGTH-I+1:LENGTH-I+1).EQ.'3') THEN
               M = 3
            ELSE IF (STRING(LENGTH-I+1:LENGTH-I+1).EQ.'4') THEN
               M = 4
            ELSE IF (STRING(LENGTH-I+1:LENGTH-I+1).EQ.'5') THEN
               M = 5
            ELSE IF (STRING(LENGTH-I+1:LENGTH-I+1).EQ.'6') THEN
               M = 6
            ELSE IF (STRING(LENGTH-I+1:LENGTH-I+1).EQ.'7') THEN
               M = 7
            ELSE IF (STRING(LENGTH-I+1:LENGTH-I+1).EQ.'8') THEN
               M = 8
            ELSE IF (STRING(LENGTH-I+1:LENGTH-I+1).EQ.'9') THEN
               M = 9
            ELSE
               IERR = 2
               RETURN
            END IF
            NUM = NUM + INT(10**(I-1))*M
20       CONTINUE
         IF (NEG) THEN
            NUM = -NUM
            STRING = '-'//STRING
            LENGTH = LENGTH + 1
         END IF
      END IF
!C
!C  Last lines of ICNVRT
!C
      RETURN
      END SUBROUTINE
         
#ENDINLINE

#DOUBLE ON 
// computer language for code produced by kpp
#LANGUAGE FORTRAN90
// #LANGUAGE FORTRAN77
// #LANGUAGE C

// initial concentrations
#INITVALUES
// conversion from mixing ratio to concentration
CFACTOR = 2.5E19;
// initial mixing ratios
ALL_SPEC = 0.;

// integrator should usually be rosenbrock
//#INTEGRATOR rosenbrock
#INTEGRATOR kpp_lsode
// #INTEGRATOR ros2_manual
// #INTEGRATOR radau5

// driver file that calls kpp subroutines
#DRIVER ./driver

// set indices of unused species to ind_*=0
#DUMMYINDEX ON

// do not create Stoichiom files
#STOICMAT OFF

// do not create Hessian files
#HESSIAN OFF

// do not create Mex files
#MEX OFF

// equation IDs
#EQNTAGS on
